// routes/reportRoutes.js
import express from 'express';
import { getReports, generateReport } from '../controllers/reportController.js';
import { protect, restrictTo } from '../middleware/authMiddleware.js';
import validateInput from '../middleware/validateInput.js';
import PDFDocument from 'pdfkit';
import Report from '../models/Report.js';

const router = express.Router();

router.get(
  '/',
  protect,
  restrictTo('manager'),
  getReports
);

router.post(
  '/',
  protect,
  restrictTo('manager'),
  validateInput(['period', 'type']),
  generateReport
);

router.get('/:id/download', async (req, res) => {
  try {
    const report = await Report.findById(req.params.id).populate('generatedBy', 'name');

    if (!report) return res.status(404).json({ message: 'Report not found' });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="report-${report._id}.pdf"`);

    const doc = new PDFDocument();
    doc.pipe(res);

    doc.fontSize(16).text(`Payroll Report (${report.type})`, { underline: true });
    doc.moveDown();
    doc.text(`Period: ${report.period}`);
    doc.text(`Generated By: ${report.generatedBy.name}`);
    doc.text(`Date: ${new Date(report.createdAt).toLocaleDateString()}`);
    doc.moveDown();

    doc.text('Details:', { underline: true });
    Object.entries(report.data).forEach(([empId, info]) => {
      doc.text(`• ${info.name}: ₹${info.totalSalary}`);
    });

    doc.end();
  } catch (err) {
    console.error('PDF Error:', err);
    res.status(500).json({ message: 'Failed to generate PDF' });
  }
});

export default router;
